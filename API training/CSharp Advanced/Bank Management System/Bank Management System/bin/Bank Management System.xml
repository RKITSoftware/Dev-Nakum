<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bank Management System</name>
    </assembly>
    <members>
        <member name="T:AddAuthorizationHeaderParameterOperationFilter">
            <summary>
            add the authorization header parameters
            </summary>
        </member>
        <member name="T:Bank_Management_System.Attributes.AuthorizationAttribute">
            <summary>
            Custom authorization attribute for handling unauthorized requests.
            </summary>
        </member>
        <member name="M:Bank_Management_System.Attributes.AuthorizationAttribute.HandleUnauthorizedRequest(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Overrides the HandleUnauthorizedRequest method to handle unauthorized requests.
            </summary>
            <param name="actionContext">HttpActionContext for the current request.</param>
        </member>
        <member name="T:Bank_Management_System.Attributes.JwtAuthorizationAttribute">
            <summary>
            Custom authorization attribute for validating JWT tokens and setting the user's identity.
            </summary>
        </member>
        <member name="M:Bank_Management_System.Attributes.JwtAuthorizationAttribute.IsAuthorized(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Overrides the IsAuthorized method to perform JWT token validation and set the user's identity.
            </summary>
            <param name="actionContext">HttpActionContext for the current request.</param>
            <returns>True if the user is authorized, false otherwise.</returns>
        </member>
        <member name="T:Bank_Management_System.Business_Logic.BLAuth">
            <summary>
            Business Logic class for authentication and authorization using JWT tokens.
            </summary>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLAuth.GenerateJWT(System.Int32,System.String,System.String,System.String)">
            <summary>
            Generates a JWT token based on user information.
            </summary>
            <param name="id">User ID.</param>
            <param name="name">User name.</param>
            <param name="email">User email.</param>
            <param name="role">User role.</param>
            <returns>Generated JWT token.</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLAuth.VerifyToken(System.String)">
            <summary>
            Verifies a JWT token and extracts user information.
            </summary>
            <param name="jwtToken">JWT token to be verified.</param>
            <returns>Dictionary containing user information extracted from the token.</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLAuth.GetTokenValidationParameters">
            <summary>
            Gets TokenValidationParameters for JWT token validation.
            </summary>
            <returns>TokenValidationParameters for JWT token validation.</returns>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLSecurity._privateKey">
            <summary>
            private key
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLSecurity.publicKey">
            <summary>
            public key
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLSecurity.privateKeyByte">
            <summary>
            private key bytes array
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLSecurity.publicKeyByte">
            <summary>
            public key bytes array
            </summary>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLSecurity.#ctor">
            <summary>
            Constructor for the Rijndael class. Initializes the private and public key bytes.
            </summary>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLSecurity.Encrypt(System.String)">
            <summary>
            Encrypts the input plain text using Rijndael algorithm.
            </summary>
            <param name="plainText">The plain text to be encrypted.</param>
            <returns>Base64-encoded encrypted text.</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLSecurity.Decrypt(System.String)">
            <summary>
            Decrypts the input encrypted text using Rijndael algorithm.
            </summary>
            <param name="encryptedText">The Base64-encoded encrypted text to be decrypted.</param>
            <returns>The decrypted plain text.</returns>
        </member>
        <member name="T:Bank_Management_System.Business_Logic.BLDbConnection">
            <summary>
            Db Connection configuration
            </summary>
        </member>
        <member name="P:Bank_Management_System.Business_Logic.BLDbConnection.Instance">
            <summary>
            create the static instance of connnection factory
            </summary>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLDbConnection.GetConnectionString">
            <summary>
            Get the connection string from db.json file
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bank_Management_System.Business_Logic.BLErrorHandling">
            <summary>
            class for manage the error handling into file
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLErrorHandling._today">
            <summary>
            get the current date and time
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLErrorHandling._fileName">
            <summary>
            file name - only date
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLErrorHandling._filePath">
            <summary>
            file path
            </summary>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLErrorHandling.CreateFile">
            <summary>
            Create the file if file is not exist
            </summary>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLErrorHandling.WriteFile(System.String)">
            <summary>
            write the error message into file
            </summary>
            <param name="msg">error message</param>
        </member>
        <member name="T:Bank_Management_System.Business_Logic.BLTransaction">
            <summary>
            Business Logic class for transaction-related operations.
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLTransaction._dbFactory">
            <summary>
            create the object of the db connection for ORM
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLTransaction._objDBTransactions">
            <summary>
            create the object of the db transaction
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLTransaction._folderPath">
            <summary>
            folder path for storing the statements
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLTransaction._objTra01">
            <summary>
            object of the transaction
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLTransaction._objUse01">
            <summary>
            object of the user
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLTransaction.objResponse">
            <summary>
             object of the response model
            </summary>
        </member>
        <member name="P:Bank_Management_System.Business_Logic.BLTransaction.TransactionType">
            <summary>
            transaction Types
            </summary>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLTransaction.#ctor">
            <summary>
            Initializes a new instance of the BLTransaction class.
            </summary>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLTransaction.ChangeKeyName(System.String)">
            <summary>
            Changes the key name for better readability in file writing.
            </summary>
            <param name="keyName">Original key name.</param>
            <returns>Modified key name.</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLTransaction.PreSave(System.Int32,Bank_Management_System.Models.DTO.DtoTra01)">
            <summary>
            pre save the object before inserting or updating into database
            </summary>
            <param name="id">transaction Id</param>
            <param name="objDtoUse01">object of the user</param>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLTransaction.ValidationOnSave">
            <summary>
            to check the validation before inserting or updating into database
            </summary>
            <returns>response model</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLTransaction.Save">
            <summary>
            insert or update the object into database
            </summary>
            <returns>response model</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLTransaction.GetAllTransactions">
            <summary>
            Retrieves details of all transactions from the database.
            </summary>
            <returns>all transaction details.</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLTransaction.GetTransactionByMe(System.Int32)">
            <summary>
            Retrieves details of transactions for a specific user from the database.
            </summary>
            <param name="userId">User ID.</param>
            <returns>transaction details</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLTransaction.FileWrite(System.String,System.Data.DataTable)">
            <summary>
            Writes transaction details to a file for a specific user.
            </summary>
            <param name="username">Username associated with the transactions.</param>
            <param name="lstDictTransactioins">List of dictionaries containing transaction details.</param>
            <returns>True if file writing is successful, false otherwise.</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLTransaction.DownloadFile(System.String)">
            <summary>
            Downloads the file containing transaction details for a specific user.
            </summary>
            <param name="username">Username associated with the transactions.</param>
            <returns>HttpResponseMessage containing the file to be downloaded.</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLTransaction.Statements(System.Int32,System.Net.Http.HttpRequestMessage)">
            <summary>
            Generates a statement file for a specific user and initiates the file download.
            </summary>
            <param name="id">User ID.</param>
            <param name="Request">HttpRequestMessage used for creating error responses.</param>
            <returns>HttpResponseMessage containing the file to be downloaded or an error response.</returns>
        </member>
        <member name="T:Bank_Management_System.Business_Logic.BLUsers">
            <summary>
            Business Logic class for user-related operations.
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLUsers._dbFactory">
            <summary>
            Create the object of the Orm Lite connection
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLUsers._objBLSecurity">
            <summary>
            create the object of the encryption and decryptions
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLUsers._objUse01">
            <summary>
            Create the object of the user model
            </summary>
        </member>
        <member name="F:Bank_Management_System.Business_Logic.BLUsers.objResponse">
            <summary>
            Create the object of the response model
            </summary>
        </member>
        <member name="P:Bank_Management_System.Business_Logic.BLUsers.OperationType">
            <summary>
            Declare the operation type properties
            </summary>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLUsers.#ctor">
            <summary>
            Initializes a new instance of the BLUsers class.
            </summary>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLUsers.IsUniqueEmail(System.String)">
            <summary>
             To check whether email is unique in data base or not
            </summary>
            <param name="email">user's email</param>
            <returns>true if unique email or else false</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLUsers.IsValidEmail(System.String)">
            <summary>
            to check whether email is valid or not
            </summary>
            <param name="email">User's email</param>
            <returns>true if email is valid or else false</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLUsers.IsValidId(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLUsers.GetUserObject(System.Int32)">
            <summary>
            /Get the user details based on user id
            </summary>
            <param name="id">user id</param>
            <returns>model of user's details</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLUsers.PreSave(Bank_Management_System.Models.DTO.DtoUse01,System.Int32)">
            <summary>
            PreSave method for save the necessary data before adding into database
            </summary>
            <param name="objDtoUse01">object of the user</param>
            <param name="id">user id - required only update the user</param>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLUsers.ValidationOnSave">
            <summary>
            perform the validation while insert or update the user details into database
            </summary>
            <returns>Response model</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLUsers.ValidationOnDelete(System.Int32)">
            <summary>
            perform the validation while delete the user using user-id
            </summary>
            <param name="id">user id</param>
            <returns>Response model</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLUsers.Save">
            <summary>
            save the user details into database while insert or update the user
            </summary>
            <returns>Response model</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLUsers.LogIn">
            <summary>
            Handles user login by verifying credentials and generating a JWT token.
            </summary>
            <param name="objUse01">User credentials for login.</param>
            <returns>Response model</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLUsers.GetUser(System.Int32)">
            <summary>
            Retrieves details of a specific user by ID.
            </summary>
            <param name="id">User ID.</param>
            <returns>Response model</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLUsers.GetAllUser">
            <summary>
            Retrieves details of all users from the database.
            </summary>
            <returns>Response model</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLUsers.Delete">
            <summary>
            Deletes a user from the database.
            </summary>
            <param name="id">User ID.</param>
            <returns>Response model</returns>
        </member>
        <member name="T:Bank_Management_System.Business_Logic.BLHashing">
            <summary>
            Business Logic class for hashing related operations.
            </summary>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLHashing.GenerateSalt">
            <summary>
            Generates a random salt for password hashing.
            </summary>
            <returns>Randomly generated salt.</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLHashing.HashPassword(System.String,System.Byte[])">
            <summary>
            Hashes the password using the provided salt and iterations.
            </summary>
            <param name="password">Password to be hashed.</param>
            <param name="salt">Salt used in hashing.</param>
            <returns>Hashed password.</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLHashing.VerifyPassword(System.String,System.String)">
            <summary>
            Verifies if the provided password matches the stored hashed password.
            </summary>
            <param name="password">Password to be verified.</param>
            <param name="storedHash">Stored hashed password.</param>
            <returns>True if the password is verified, false otherwise.</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLHashing.HashPassword(System.String)">
            <summary>
            Hashes the provided password and generates a random salt.
            </summary>
            <param name="password">Password to be hashed.</param>
            <returns>Hashed password with salt.</returns>
        </member>
        <member name="M:Bank_Management_System.Business_Logic.BLHashing.Verify(System.String,System.String)">
            <summary>
            Verifies if the provided password matches the stored hashed password.
            </summary>
            <param name="password">Password to be verified.</param>
            <param name="storedHash">Stored hashed password.</param>
            <returns>True if the password is verified, false otherwise.</returns>
        </member>
        <member name="T:Bank_Management_System.DB.DBHelper">
            <summary>
            manage to execute the query
            </summary>
        </member>
        <member name="M:Bank_Management_System.DB.DBHelper.ExecuteQuery(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            Execute the query based on provided connection and query
            </summary>
            <param name="objMySqlConnection">MySQL connection</param>
            <param name="query">MySQL query</param>
            <returns>response in the data table</returns>
        </member>
        <member name="T:Bank_Management_System.DB.DBTransaction">
            <summary>
            Manage the transaction related queries
            </summary>
        </member>
        <member name="F:Bank_Management_System.DB.DBTransaction._objBLDbConnection">
            <summary>
            create the object of the db connection
            </summary>
        </member>
        <member name="F:Bank_Management_System.DB.DBTransaction._objDBHelper">
            <summary>
            create the object of the db helper for execute the query
            </summary>
        </member>
        <member name="M:Bank_Management_System.DB.DBTransaction.#ctor">
            <summary>
            initialize the object of the DB connection
            </summary>
        </member>
        <member name="M:Bank_Management_System.DB.DBTransaction.GetAllTransactions">
            <summary>
            Retrieves details of all transactions from the database.
            </summary>
            <returns>all transaction details.</returns>
        </member>
        <member name="M:Bank_Management_System.DB.DBTransaction.GetTransactionByMe(System.Int32)">
            <summary>
            Retrieves details of transactions for a specific user from the database.
            </summary>
            <param name="userId">User ID.</param>
            <returns>transaction details</returns>
        </member>
        <member name="T:Bank_Management_System.Extensions.ConvertExtension">
            <summary>
            Convert the dto model to poco model
            </summary>
        </member>
        <member name="M:Bank_Management_System.Extensions.ConvertExtension.Convert``2(``0,``1)">
            <summary>
            convert DTo to POCO
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="destination"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Bank_Management_System.Extensions.Use01Extension">
            <summary>
            extension methods for reuse the custom logic
            </summary>
        </member>
        <member name="M:Bank_Management_System.Extensions.Use01Extension.UpdateBalance(Bank_Management_System.Models.POCO.Use01,System.Int32,Bank_Management_System.Enums.enmTransactionTypes)">
            <summary>
            update the balance 
            </summary>
            <param name="_objUse01">object of the current logged in user</param>
            <param name="amount">total amount to update the balance</param>
            <param name="transactionTypes">transaction type - Deposit or withdraw</param>
            <returns></returns>
        </member>
        <member name="T:Bank_Management_System.Enums.enmOperationTypes">
            <summary>
            manage the operation types (A- Add, E - Edit, D-Delete)
            </summary>
        </member>
        <member name="F:Bank_Management_System.Enums.enmOperationTypes.E">
            <summary>
            Edit
            </summary>
        </member>
        <member name="F:Bank_Management_System.Enums.enmOperationTypes.A">
            <summary>
            Add
            </summary>
        </member>
        <member name="F:Bank_Management_System.Enums.enmOperationTypes.D">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:Bank_Management_System.Enums.enmOperationTypes.Login">
            <summary>
            Login
            </summary>
        </member>
        <member name="T:Bank_Management_System.Enums.enmTransactionTypes">
            <summary>
            Manage the transaction types (D - Deposit, W - Withdraw)
            </summary>
        </member>
        <member name="F:Bank_Management_System.Enums.enmTransactionTypes.D">
            <summary>
            Deposit
            </summary>
        </member>
        <member name="F:Bank_Management_System.Enums.enmTransactionTypes.W">
            <summary>
            Withdraw
            </summary>
        </member>
        <member name="T:Bank_Management_System.Controllers.CLUsersController">
            <summary>
            Controller for managing user-related operations.
            </summary>
        </member>
        <member name="F:Bank_Management_System.Controllers.CLUsersController._objBLUsers">
            <summary>
            Create the object of user service
            </summary>
        </member>
        <member name="F:Bank_Management_System.Controllers.CLUsersController.objResponse">
            <summary>
            Create the object of response model
            </summary>
        </member>
        <member name="M:Bank_Management_System.Controllers.CLUsersController.#ctor">
            <summary>
            Initializes a new instance of the CLUsersController class.
            </summary>
        </member>
        <member name="M:Bank_Management_System.Controllers.CLUsersController.GetCurrentUser">
            <summary>
            Gets the current user's ID from the claims.
            </summary>
            <returns>The current user's ID or 0 if not found.</returns>
        </member>
        <member name="M:Bank_Management_System.Controllers.CLUsersController.SignUp(Bank_Management_System.Models.DTO.DtoUse01)">
            <summary>
            Handles user sign-up.
            </summary>
            <param name="objDtoUse01">User details for sign-up.</param>
            <returns>Response model</returns>
        </member>
        <member name="M:Bank_Management_System.Controllers.CLUsersController.LogIn(Bank_Management_System.Models.DTO.DtoUse01)">
            <summary>
            Handles user login.
            </summary>
            <param name="objDtoUse01">User credentials for login.</param>
            <returns>Response model</returns>
        </member>
        <member name="M:Bank_Management_System.Controllers.CLUsersController.GetUser">
            <summary>
            Retrieves details of the currently logged-in user.
            </summary>
            <returns>Response model</returns>
        </member>
        <member name="M:Bank_Management_System.Controllers.CLUsersController.GetAllUser">
            <summary>
            Retrieves details of all users.
            </summary>
            <returns>Response model</returns>
        </member>
        <member name="M:Bank_Management_System.Controllers.CLUsersController.UpdateUser(Bank_Management_System.Models.DTO.DtoUse01)">
            <summary>
            Updates details of the currently logged-in user.
            </summary>
            <param name="objDtoUse01">Updated user details.</param>
            <returns>Response model</returns>
        </member>
        <member name="M:Bank_Management_System.Controllers.CLUsersController.DeleteUser">
            <summary>
            Deletes the currently logged-in user.
            </summary>
            <returns>Response model</returns>
        </member>
        <member name="T:Bank_Management_System.Models.DTO.DtoTra01">
            <summary>
            manage the schema of transactions
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.DTO.DtoTra01.A01F03">
            <summary>
            Transactions Money
            </summary>
        </member>
        <member name="T:Bank_Management_System.Models.DTO.DtoUse01">
            <summary>
            Manage the schema of users
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.DTO.DtoUse01.E01F02">
            <summary>
            Employee's Name
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.DTO.DtoUse01.E01F03">
            <summary>
            Employee's Password
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.DTO.DtoUse01.E01F04">
            <summary>
            Employee's Email
            </summary>
        </member>
        <member name="T:Bank_Management_System.Models.Tra01">
            <summary>
            Schema of the Transactions
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.Tra01.A01F01">
            <summary>
            Transaction's Id
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.Tra01.A01F02">
            <summary>
            Employee's Id
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.Tra01.A01F03">
            <summary>
            Transactions Money
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.Tra01.A01F04">
            <summary>
            Deposit or withdraw
            </summary>
        </member>
        <member name="T:Bank_Management_System.Models.POCO.Use01">
            <summary>
            Schema of the user
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.POCO.Use01.E01F01">
            <summary>
            User's id
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.POCO.Use01.E01F02">
            <summary>
            User's Name
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.POCO.Use01.E01F03">
            <summary>
            User's Password
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.POCO.Use01.E01F04">
            <summary>
            User's Email
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.POCO.Use01.E01F05">
            <summary>
            User's Money
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.POCO.Use01.E01F06">
            <summary>
            User's Role
            </summary>
        </member>
        <member name="T:Bank_Management_System.Models.Response">
            <summary>
            schema of Response 
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.Response.IsError">
            <summary>
            Error is exist or not
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.Response.Message">
            <summary>
            Messages
            </summary>
        </member>
        <member name="P:Bank_Management_System.Models.Response.Data">
            <summary>
            Data to Display
            </summary>
        </member>
        <member name="T:Bank_Management_System.Other.ValidateModelState">
            <summary>
            validate the model 
            </summary>
        </member>
        <member name="M:Bank_Management_System.Other.ValidateModelState.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Called before the action method is executed, performs model state validation.
            </summary>
            <param name="actionContext">The context for the action.</param>
        </member>
        <member name="T:CLTransactionsController">
            <summary>
            Controller for managing financial transactions.
            </summary>
        </member>
        <member name="F:CLTransactionsController._objBLTransaction">
            <summary>
            create the object of the transaction services
            </summary>
        </member>
        <member name="F:CLTransactionsController.objResponse">
            <summary>
            create the object of the response model
            </summary>
        </member>
        <member name="M:CLTransactionsController.#ctor">
            <summary>
            Initializes a new instance of the CLTransactionsController class.
            </summary>
        </member>
        <member name="M:CLTransactionsController.GetCurrentUser">
            <summary>
            Gets the current user's ID from the claims.
            </summary>
            <returns>The current user's ID or 0 if not found.</returns>
        </member>
        <member name="M:CLTransactionsController.DepositMoney(Bank_Management_System.Models.DTO.DtoTra01)">
            <summary>
            Handles depositing money into a user's account.
            </summary>
            <param name="objTra">Transaction details for deposit.</param>
            <returns>HTTP response indicating success or failure.</returns>
        </member>
        <member name="M:CLTransactionsController.WithdrawMoney(Bank_Management_System.Models.DTO.DtoTra01)">
            <summary>
            Handles withdrawing money from a user's account.
            </summary>
            <param name="objTra">Transaction details for withdrawal.</param>
            <returns>HTTP response indicating success or failure.</returns>
        </member>
        <member name="M:CLTransactionsController.GetAllTransactions">
            <summary>
            Retrieves details of all transactions (Admin-only access).
            </summary>
            <returns>HTTP response containing a list of transaction details.</returns>
        </member>
        <member name="M:CLTransactionsController.GetTransactionByMe">
            <summary>
            Retrieves details of transactions for the currently logged-in user.
            </summary>
            <returns>HTTP response containing a list of transaction details.</returns>
        </member>
        <member name="M:CLTransactionsController.Statements">
            <summary>
            Generates a statement of transactions for the currently logged-in user.
            </summary>
            <returns>HTTP response containing the transaction statement file.</returns>
        </member>
    </members>
</doc>
