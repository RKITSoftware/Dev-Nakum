using Exception.BL;using Exception.Models;using System;using System.Net;using System.Net.Http;using System.Web.Http;namespace Exception.Controllers{    /// <summary>    /// perform exception on info model    /// </summary>    public class CLInfoController : ApiController    {        #region Private Member        private BLUsers _objBLUsers;        #endregion        #region Construtor        public CLInfoController()        {            _objBLUsers = new BLUsers();        }        #endregion        /// <summary>        /// HTTPError type exception handling        /// </summary>        /// <param name="id"></param>        /// <returns>response message</returns>        [HttpGet]        [Route("api/info/{id}")]        public HttpResponseMessage GetInfo(int id)        {            Info user = _objBLUsers.GetUser(id);            if(user == null)            {                string errorMes = $"Data not found for id {id}";                return Request.CreateErrorResponse(HttpStatusCode.NotFound, errorMes);            }            return Request.CreateResponse(HttpStatusCode.OK, user);        }        /// <summary>        ///     HttpResponseException        ///     if user is null its throw an error         /// </summary>        /// <param name="id">user id</param>        /// <returns>status code with error message </returns>        /// <exception cref="HttpResponseException"></exception>        [HttpGet]        [Route("api/info/exception/{id}")]        public IHttpActionResult GetInfoException(int id)        {            // find the user based on id            Info user = _objBLUsers.GetUser(id);            if (user == null)            {                HttpResponseMessage errorMsg = new HttpResponseMessage(HttpStatusCode.NotFound){                    Content = new StringContent($"Data not found for id {id}")                };                          throw new HttpResponseException(errorMsg);            }            return Ok(user);        }        /// <summary>        ///     HttpResponseException - custom exception filter        /// </summary>        /// <param name="id">user id</param>        /// <returns>throw an exception</returns>        [HttpGet]        [Route("api/info/filter/{id}")]        public IHttpActionResult CustomExceptionFilter(int id)        {            var user = _objBLUsers.GetUser(id);            if (user == null)            {                throw new NullReferenceException();     // throw an from custom exception class             }            return Ok();        }    }}